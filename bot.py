import os
import logging
import time
import threading
import telebot
import google.generativeai as genai
from google.cloud import firestore
from dotenv import load_dotenv
from datetime import datetime
import sys
import re
import html
from google.oauth2 import service_account
import json

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# Vari√°veis globais
model = None
db = None
bot_running = threading.Event()
user_state = {}  # Dicion√°rio para rastrear o estado do usu√°rio

def sanitizar_html(texto):
    try:
        # Remover marca√ß√µes redundantes
        texto = texto.replace('**', '')
        
        # Dividir o texto em se√ß√µes mantendo quebras de linha
        linhas = texto.split('\n')
        texto_formatado = []
        
        # Flags de controle
        em_lista = False
        em_procedimento = False
        paragrafo_atual = []
        
        for linha in linhas:
            linha = linha.strip()
            
            # Pular linhas completamente vazias
            if not linha:
                # Adicionar par√°grafo atual se existir
                if paragrafo_atual:
                    texto_formatado.append('\n'.join(paragrafo_atual))
                    paragrafo_atual = []
                # Adicionar linha em branco para manter espa√ßamento
                texto_formatado.append('')
                continue
            
            # Processamento de listas
            if linha.startswith(('*', '-', '‚Ä¢')):
                linha_limpa = linha.lstrip('*-‚Ä¢').strip()
                paragrafo_atual.append(f'üîπ {linha_limpa}')
                em_lista = True
            
            # Processamento de procedimentos numerados
            elif re.match(r'^\d+\.', linha):
                paragrafo_atual.append(f'{linha}')
                em_procedimento = True
            
            # Conte√∫do normal
            else:
                # Se est√°vamos em uma lista ou procedimento, fechamos
                if em_lista or em_procedimento:
                    texto_formatado.append('\n'.join(paragrafo_atual))
                    paragrafo_atual = []
                    em_lista = False
                    em_procedimento = False
                
                paragrafo_atual.append(linha)
        
        # Adicionar √∫ltimo par√°grafo se existir
        if paragrafo_atual:
            texto_formatado.append('\n'.join(paragrafo_atual))
        
        # Juntar o texto formatado
        texto_final = '\n\n'.join(texto_formatado)
        
        # Tratamento HTML
        texto_final = html.escape(texto_final, quote=False)
        tags_permitidas = ['b', 'i', 'u', 'code', 'pre']
        for tag in tags_permitidas:
            texto_final = texto_final.replace(f'&lt;{tag}&gt;', f'<{tag}>')
            texto_final = texto_final.replace(f'&lt;/{tag}&gt;', f'</{tag}>')
        
        # Remover espa√ßos em branco excessivos, mas manter pelo menos duas quebras de linha
        texto_final = re.sub(r'\n{3,}', '\n\n', texto_final)
        
        # Adicionar rodap√© t√©cnico
        texto_final += '\n\n<i>üö® RELAT√ìRIO GERADO POR SISTEMA DE DIAGN√ìSTICO AUTOMATIZADO</i>'
        
        return texto_final
    
    except Exception as e:
        logger.error(f"Erro na sanitiza√ß√£o HTML: {e}")
        return "Erro ao processar resposta t√©cnica."


def dividir_mensagem(texto, max_length=4000):
    paragrafos = texto.split('\n')
    mensagens = []
    mensagem_atual = ""
    
    for paragrafo in paragrafos:
        # Se a pr√≥xima linha ultrapassar o limite, criar nova mensagem
        if len(mensagem_atual) + len(paragrafo) + 2 > max_length:
            mensagens.append(mensagem_atual.strip())
            mensagem_atual = ""
        
        # Adicionar linha √† mensagem atual
        if mensagem_atual:
            mensagem_atual += "\n"
        mensagem_atual += paragrafo
    
    # Adicionar √∫ltima mensagem
    if mensagem_atual:
        mensagens.append(mensagem_atual.strip())
    
    return mensagens

# Configura√ß√£o do Gemini
def configurar_gemini():
    global model
    try:
        logger.info("Iniciando configura√ß√£o do Gemini")
        genai.configure(api_key=GOOGLE_API_KEY)
        
        # Lista de modelos recomendados para substitui√ß√£o
        modelos_preferidos = [
            'gemini-1.5-pro-latest',
            'gemini-1.5-pro',
            'gemini-1.5-flash-latest', 
            'gemini-1.5-flash',
            'gemini-pro'
        ]
        
        modelo_funcionando = None
        
        for nome_modelo in modelos_preferidos:
            try:
                logger.info(f"Tentando configurar modelo: {nome_modelo}")
                model = genai.GenerativeModel(nome_modelo)
                
                # Teste r√°pido de gera√ß√£o de conte√∫do
                teste_resposta = model.generate_content("Sistema de empilhadeira")
                
                logger.info(f"Modelo {nome_modelo} configurado com sucesso!")
                modelo_funcionando = nome_modelo
                break
            except Exception as e:
                logger.warning(f"Falha ao configurar {nome_modelo}: {e}")
        
        if modelo_funcionando:
            logger.info(f"Modelo final configurado: {modelo_funcionando}")
            return True
        else:
            logger.error("Nenhum modelo de texto encontrado ou funcional")
            return False
    
    except Exception as e:
        logger.error(f"Erro cr√≠tico na configura√ß√£o do Gemini: {e}", exc_info=True)
        return False

# Configura√ß√£o do Firestore
def configurar_firestore():
    global db
    try:
        # Usar vari√°vel de ambiente para credenciais
        credentials_json = os.getenv('GOOGLE_APPLICATION_CREDENTIALS_JSON')
        
        if credentials_json:
            # Converter string JSON para dicion√°rio
            creds_dict = json.loads(credentials_json)
            
            # Configurar credenciais
            credentials = service_account.Credentials.from_service_account_info(creds_dict)
            
            # Inicializar Firestore com credenciais
            db = firestore.Client(
                project=os.getenv('GOOGLE_PROJECT_ID'), 
                credentials=credentials
            )
            
            logger.info("Conex√£o com Firestore estabelecida com sucesso!")
            return db
        else:
            logger.error("Credenciais do Firestore n√£o encontradas")
            return None
    
    except Exception as e:
        logger.error(f"Erro na conex√£o com Firestore: {e}", exc_info=True)
        return None

# Salvar manuten√ß√£o no Firestore
def salvar_manutencao(equipamento, problema, solucao):
    try:
        manutencoes_ref = db.collection('manutencoes')
        doc_ref = manutencoes_ref.document()
        doc_ref.set({
            'equipamento': equipamento,
            'problema': problema,
            'solucao': solucao,
            'data': firestore.SERVER_TIMESTAMP
        })
        logger.info("Registro salvo no Firestore")
        return True
    except Exception as e:
        logger.error(f"Erro ao salvar no Firestore: {e}")
        return False

# Buscar solu√ß√µes anteriores no Firestore
def buscar_solucoes_anteriores(equipamento):
    try:
        manutencoes_ref = db.collection('manutencoes')
        query = manutencoes_ref.where('equipamento', '==', equipamento).order_by('data', direction=firestore.Query.DESCENDING).limit(5)
        solucoes = [doc.to_dict() for doc in query.stream()]
        return solucoes
    except Exception as e:
        logger.error(f"Erro ao buscar solu√ß√µes anteriores: {e}")
        return []

def fallback_diagnostico(equipamento, problema):
    """
    Gerar diagn√≥stico gen√©rico de fallback se a IA falhar
    
    Args:
        equipamento (str): Nome do equipamento 
        problema (str): Descri√ß√£o do problema
    
    Returns:
        str: Diagn√≥stico preliminar gen√©rico
    """
    logger.warning(f"Gerando diagn√≥stico de fallback para {equipamento}")
    
    return f"""
**Diagn√≥stico T√©cnico - {equipamento}**

**1. Problema**
Diagn√≥stico preliminar para situa√ß√£o de: {problema}

**2. An√°lise T√©cnica Detalhada**
N√£o foi poss√≠vel gerar um diagn√≥stico automatizado espec√≠fico devido a limita√ß√µes do sistema.

**3. Poss√≠veis Causas**
- Complexidade do problema al√©m da capacidade de an√°lise atual
- Necessidade de inspe√ß√£o t√©cnica especializada
- Vari√°veis n√£o capturadas pelo sistema de diagn√≥stico

**4. Procedimento de Diagn√≥stico**
1. Realizar inspe√ß√£o f√≠sica completa do equipamento
2. Consultar manual t√©cnico espec√≠fico do fabricante
3. Documentar detalhadamente todas as observa√ß√µes
4. Considerar chamada de suporte t√©cnico especializado

**5. Passos de Reparo**
- N√£o recomendados sem avalia√ß√£o presencial
- Necess√°rio laudo t√©cnico detalhado

**6. Pe√ßas Potencialmente Envolvidas**
Sem identifica√ß√£o precisa. Requer an√°lise t√©cnica presencial.

üö® ATEN√á√ÉO: Este √© um diagn√≥stico preliminar AUTOM√ÅTICO. 
N√ÉO substitui avalia√ß√£o de profissional t√©cnico qualificado.
"""

def buscar_solucao_ia(equipamento, problema):
    try:
        if not model:
            raise ValueError("Modelo Gemini n√£o configurado")
        
        prompt = f"""
DIAGN√ìSTICO T√âCNICO DE EQUIPAMENTO

üìç EQUIPAMENTO: {equipamento}
‚ùó PROBLEMA DESCRITO: {problema}

INSTRU√á√ïES PARA DIAGN√ìSTICO:

1. AN√ÅLISE T√âCNICA
- Avalie EXCLUSIVAMENTE o equipamento mencionado
- Foque NOS DETALHES ESPEC√çFICOS do problema descrito
- Use linguagem t√©cnica DIRETA e OBJETIVA

2. ESTRUTURA DO RELAT√ìRIO
a) IDENTIFICA√á√ÉO DO PROBLEMA
   - Descri√ß√£o t√©cnica precisa
   - Sintomas observados

b) POSS√çVEIS CAUSAS
   - Lista de causas potenciais
   - Priorize as mais prov√°veis
   - Baseie-se em dados t√©cnicos

c) PROCEDIMENTO DE DIAGN√ìSTICO
   - Passos sequenciais para investiga√ß√£o
   - Testes ou verifica√ß√µes espec√≠ficas
   - Equipamentos/ferramentas necess√°rias

d) RECOMENDA√á√ïES DE REPARO
   - A√ß√µes corretivas
   - Pe√ßas potencialmente envolvidas
   - N√≠vel de urg√™ncia

IMPORTANTE:
- IGNORE hist√≥ricos anteriores
- FOQUE no problema ATUAL
- Seja T√âCNICO e OBJETIVO
- Em sua resposta, siga o modelo abaixo:

üîß DIAGN√ìSTICO T√âCNICO

‚ùó <b>PROBLEMA IDENTIFICADO</b>
Descri√ß√£o t√©cnica do problema...

üìã <b>AN√ÅLISE T√âCNICA APROFUNDADA</b>
Detalhamento t√©cnico...

üîç <b>CAUSAS PROV√ÅVEIS</b>
üîπ Causa t√©cnica espec√≠fica
üîπ Outra poss√≠vel causa... (citar no m√≠nimo 3)

üõ†Ô∏è <b>PROCEDIMENTO DIAGN√ìSTICO</b>
1. Primeiro passo de diagn√≥stico
2. Segundo passo... (citar no m√≠nimo 3)

"""
        
        resposta = model.generate_content(
            prompt, 
            safety_settings=[
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"}
            ],
            generation_config={
                "max_output_tokens": 2048,
                "temperature": 0.7,
                "top_p": 0.9
            }
        )
        
        # Verifica√ß√µes de resposta mantidas
        if not resposta.text or len(resposta.text.strip()) < 100:
            logger.warning("Resposta do Gemini muito curta ou vazia")
            return fallback_diagnostico(equipamento, problema)
        
        texto_resposta = sanitizar_html(resposta.text)
        
        logger.info("Resposta do Gemini recebida com sucesso")
        return texto_resposta
    
    except Exception as e:
        logger.error(f"Erro na consulta de IA: {e}", exc_info=True)
        return fallback_diagnostico(equipamento, problema)

# Telegram Bot - Configura√ß√£o
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode='HTML')

@bot.message_handler(commands=['start'])
def mensagem_inicial(message):
    logger.info(f"Comando /start recebido de {message.from_user.username}")
    
    # Resetar o estado do usu√°rio
    user_state[message.from_user.id] = {'stage': 'intro'}
    
    bot.reply_to(message, 
        "üöß Assistente T√©cnico de Manuten√ß√£o üöß\n\n"
        "Vamos come√ßar: Por favor, informe detalhes do equipamento:\n"
        "‚Ä¢ Marca\n"
        "‚Ä¢ Modelo\n"
        "‚Ä¢ Vers√£o/Ano\n\n"
        "Exemplo: Transpaleteira el√©trica Linde T20 SP - 2022"
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    
    # Se o usu√°rio n√£o tiver estado definido ou estiver fora do fluxo correto, reiniciar
    if (user_id not in user_state or 
        user_state[user_id].get('stage') not in ['intro', 'problem_description', 'feedback']):
        # Sempre redirecionar para a mensagem inicial
        bot.reply_to(message, 
            "üöß Assistente T√©cnico de Manuten√ß√£o üöß\n\n"
            "Vamos come√ßar: Por favor, informe detalhes do equipamento:\n"
            "‚Ä¢ Marca\n"
            "‚Ä¢ Modelo\n"
            "‚Ä¢ Vers√£o/Ano\n\n"
            "Exemplo: Transpaleteira el√©trica Linde T20 SP - 2022"
        )
        # Resetar o estado para o est√°gio inicial
        user_state[user_id] = {'stage': 'intro'}
        return
    
    try:
        current_stage = user_state[user_id].get('stage')
        
        if current_stage == 'intro':
            # Capturar informa√ß√µes do equipamento
            equipamento = message.text.strip()
            
            # Validar se a mensagem n√£o est√° vazia
            if not equipamento:
                bot.reply_to(message, "‚ùå Por favor, informe os detalhes do equipamento.")
                return
            
            # Salvar informa√ß√µes do equipamento e mudar para pr√≥ximo est√°gio
            user_state[user_id] = {
                'stage': 'problem_description',
                'equipamento': equipamento
            }
            
            # Solicitar descri√ß√£o do problema
            bot.reply_to(message, 
                f"‚úÖ Equipamento registrado: <b>{equipamento}</b>\n\n"
                "Agora, descreva detalhadamente o problema que voc√™ est√° enfrentando. "
                "Seja o mais espec√≠fico poss√≠vel sobre os sintomas, comportamentos incomuns, "
                "sons, ou qualquer outra observa√ß√£o relevante."
            )
        
        elif current_stage == 'problem_description':
            # Capturar descri√ß√£o do problema
            problema = message.text.strip()
            
            # Validar se a descri√ß√£o n√£o est√° vazia
            if not problema:
                bot.reply_to(message, "‚ùå Por favor, descreva o problema em detalhes.")
                return
            
            # Buscar solu√ß√£o via IA
            equipamento = user_state[user_id]['equipamento']
            solucao = buscar_solucao_ia(equipamento, problema)
            
            # Dividir mensagem
            mensagens = dividir_mensagem(solucao)
            
            # Criar primeira mensagem com cabe√ßalho
            primeira_mensagem = f"üîß <b>DIAGN√ìSTICO PARA: {equipamento}</b>"
            
            # Enviar primeira mensagem (cabe√ßalho + primeiro conte√∫do)
            if mensagens:
                bot.reply_to(message, f"{primeira_mensagem}\n\n{mensagens[0]}")
            
            # Enviar mensagens subsequentes
            for msg_adicional in mensagens[1:]:
                bot.send_message(message.chat.id, msg_adicional)
            
            # Salvar no Firestore
            salvar_manutencao(equipamento, problema, solucao)
            
            # Solicitar feedback
            user_state[user_id] = {
                'stage': 'feedback',
                'equipamento': equipamento,
                'problema': problema,
                'solucao': solucao
            }
            
            bot.send_message(message.chat.id, 
                "A solu√ß√£o foi √∫til?\n"
                "Responda:\n"
                "‚úÖ SIM - se a solu√ß√£o resolveu o problema\n"
                "‚ùå N√ÉO - se precisou de outras a√ß√µes"
            )
        
        elif current_stage == 'feedback':
            feedback = message.text.strip().lower()
            
            if feedback in ['‚úÖ', 'sim']:
                bot.reply_to(message, 
                    "√ìtimo! Fico feliz em ter ajudado. üëç\n"
                    "Se precisar de mais alguma coisa, use /start."
                )
            elif feedback in ['‚ùå', 'n√£o']:
                bot.reply_to(message, 
                    "Pe√ßo desculpas que a solu√ß√£o n√£o foi completamente efetiva. ü§î\n"
                    "Por favor, descreva detalhadamente o que foi diferente ou o que n√£o funcionou."
                )
                # Preparar para registrar informa√ß√£o adicional
                user_state[user_id]['stage'] = 'additional_info'
            else:
                bot.reply_to(message, 
                    "Desculpe, n√£o entendi sua resposta. ü§®\n"
                    "Por favor, responda com ‚úÖ SIM ou ‚ùå N√ÉO"
                )
        
        elif current_stage == 'additional_info':
            informacao_adicional = message.text.strip()
            
            # Opcional: Salvar informa√ß√£o adicional no Firestore
            try:
                manutencoes_ref = db.collection('manutencoes_feedback')
                doc_ref = manutencoes_ref.document()
                doc_ref.set({
                    'equipamento': user_state[user_id]['equipamento'],
                    'problema_original': user_state[user_id]['problema'],
                    'solucao_original': user_state[user_id]['solucao'],
                    'feedback_negativo': informacao_adicional,
                    'data': firestore.SERVER_TIMESTAMP
                })
                
                bot.reply_to(message, 
                    "Obrigado pelo feedback detalhado! üìù\n"
                    "Nossa equipe ir√° analisar para melhorar futuras solu√ß√µes.\n"
                    "Use /start para novo diagn√≥stico."
                )
            except Exception as e:
                logger.error(f"Erro ao salvar feedback adicional: {e}")
                bot.reply_to(message, "Erro ao processar seu feedback. Tente novamente.")
            
            # Resetar estado
            user_state[user_id] = {'stage': 'intro'}
    
    except Exception as e:
        logger.error(f"Erro detalhado ao processar: {e}", exc_info=True)
        bot.reply_to(message, f"Desculpe, ocorreu um erro: {str(e)}")

def start_bot():
    tentativas = 0
    max_tentativas = 5
    while not bot_running.is_set() and tentativas < max_tentativas:
        try:
            logger.info(f"Tentativa {tentativas + 1} de iniciar o bot")
            bot.remove_webhook()
            
            # Adicionar polling com par√¢metros mais robustos
            bot.polling(
                none_stop=True, 
                timeout=90, 
                long_polling_timeout=90,
                skip_pending=True  # Ignorar updates pendentes
            )
            
            bot_running.set()
        except telebot.apihelper.ApiException as e:
            logger.error(f"Erro de API do Telegram: {e}")
            if e.result.status_code == 409:
                logger.warning("Conflito de sess√£o detectado. Aguardando e tentando novamente...")
                time.sleep(10)  # Aguardar antes de tentar novamente
            tentativas += 1
        except Exception as e:
            logger.critical(f"Erro no polling do bot: {e}", exc_info=True)
            time.sleep(10)
            tentativas += 1
    
    if tentativas >= max_tentativas:
        logger.critical("Falha ao iniciar o bot ap√≥s m√∫ltiplas tentativas")
        sys.exit(1)

def main():
    # Configura√ß√µes iniciais
    gemini_ok = configurar_gemini()
    firestore_ok = configurar_firestore()
    
    if not (gemini_ok and firestore_ok):
        logger.critical("Falha em configurar servi√ßos. Encerrando.")
        return
    
    logger.info("Inicializando bot de suporte t√©cnico...")
    
    # Inicia o bot em uma thread separada
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.start()

    # Manter o programa principal rodando
    try:
        bot_thread.join()
    except KeyboardInterrupt:
        logger.info("Encerrando bot...")
        bot_running.set()
        bot_thread.join()

if __name__ == '__main__':
    main()
